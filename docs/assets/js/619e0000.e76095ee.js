"use strict";(self.webpackChunksite_generator_docusaurus=self.webpackChunksite_generator_docusaurus||[]).push([[8230],{41722:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"vouch-identity/offline-assets/key-concepts/sync","title":"Sync","description":"The Sync feature in the Vouch SDK is responsible for synchronizing data between the user device and the backend. This ensures that all relevant information is up to date and allows the system to check for new tasks related to personas.","source":"@site/versioned_docs/version-0.101.0/01-vouch-identity/03-offline-assets/key-concepts/sync.md","sourceDirName":"01-vouch-identity/03-offline-assets/key-concepts","slug":"/vouch-identity/offline-assets/key-concepts/sync","permalink":"/docs/0.101.0/vouch-identity/offline-assets/key-concepts/sync","draft":false,"unlisted":false,"tags":[],"version":"0.101.0","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"identitySidebar","previous":{"title":"Asset Access","permalink":"/docs/0.101.0/vouch-identity/offline-assets/key-concepts/asset-access"},"next":{"title":"Secure Boot","permalink":"/docs/0.101.0/vouch-identity/offline-assets/key-concepts/secure-boot"}}');var i=n(74848),o=n(28453);const a={sidebar_position:5},r="Sync",c={},d=[];function l(e){const s={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"sync",children:"Sync"})}),"\n",(0,i.jsx)(s.p,{children:"The Sync feature in the Vouch SDK is responsible for synchronizing data between the user device and the backend. This ensures that all relevant information is up to date and allows the system to check for new tasks related to personas."}),"\n",(0,i.jsx)(s.p,{children:"When a user initiates a sync, the SDK checks if there are any new AssetPersonaTask items available. If there are pending tasks, the user can be prompted prompted to accept them. These tasks might involve key shares or other workflows that need user confirmation before proceeding. By accepting these tasks, the user authorizes the interaction capabilities granted by their persona, ensuring their control over asset-related activities remains active and secure."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-java",children:'    public void sync(View button) {\n        viewModel.sync(this);\n        int pendingTasks = viewModel.getAssetPersonaTasks().size();\n        if (pendingTasks > 0) {\n            AlertDialog.Builder dialog = new AlertDialog.Builder(this);\n            dialog.setTitle(String.format("New Key Share%s", pendingTasks > 1 ? "s" : ""))\n                .setMessage(String.format("%d new key%s %s been shared with you", pendingTasks, pendingTasks > 1 ? "s" : "", pendingTasks > 1 ? "have" : "has"))\n                .setPositiveButton(\n                     "Accept",\n                     new DialogInterface.OnClickListener() {\n                         public void onClick(DialogInterface dialog, int which) {\n                             viewModel.acceptAllAssetPersonaTasks();\n                         }\n                     });\n            dialog.create().show();\n        }\n    }\n'})})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>r});var t=n(96540);const i={},o=t.createContext(i);function a(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);